//
// This adds a function to the global namespace:
//
//     identifyKey(keyboardEvent);
//
// The keyboardEvent argument should be a keyup/keydown DOM event.
// This adds the following properties to the event:
//
//   Latest spec:
//     code - (string) identifier of the key from the DOM 4 Events working draft
//     location - (number) location of key on device, from the DOM 4 Events working draft
//     queryKeyCap(code) - (function) yields a human readable label for the key

// ---------------------------------------------------------------------
// Background: Keys vs. Characters
// ---------------------------------------------------------------------
//
// In most operating systems, physical key presses generate events (keydown, keyup)
// which are delivered to applications but simultaneously processed by the operating
// system to perform actions or generate characters. For example:
//    Keys: [A] - generate character 'a'
//    Keys: [Shift] - no character generated
//    Keys: [Shift]+[A] - generate character 'A'
//    Keys: [9] - generate character '9'
//    Keys: [Shift]+[9] - generate character '('
//    Keys: [;:] - generate character ';'
//    Keys: [Shift]+[;:] - generate character ':'
//    Keys: [Alt]+[`~], [E] - generate e with grave accent
//    Keys: [Alt]+[0],[1],[2],[8] - generate Euro symbol
//    Keys: [Enter] - generate 0x0D character (maybe)
//    Keys: [Esc] - generate 0x1B character (maybe)
// And of course, for non-Latin languages things get even more complicated
// including IMEs where multiple keystrokes may generate a list of candidate
// characters in an OS- or application-provided display, from which the user
// selects before the character is presented to the application.

// ---------------------------------------------------------------------
// Browsers and Key Events
// ---------------------------------------------------------------------
//
// Keyboard events were implemented before a specification was written; as
// such, the behavior across browsers is very different. The HTML4 spec
// defines the model as sending 'keydown' and 'keyup' events corresponding
// to physical actions with the keys (with possibly repeated 'keydown'
// events due to auto-repeat), and 'keypress' events corresponding to
// the generation of a character. The actual properties identifying
// the key are unspecified, but can be described as:
//
//  readonly attribute unsigned long keyCode;
//  readonly attribute unsigned long charCode;
//  readonly attribute unsigned long which;
//
//    |keyCode| is a OS/browser dependent code identifying the specific key;
//    sent on keydown and keyup events
//
//    |charCode| is the Unicode code point of character generated by key
//    press sequence, sent on keypress events
//
//    |which| is only used in some browsers - it's basically like charCode
//    combined with keyCode
//
// For compatibility most browsers conform on the keyCode values produced
// by Microsoft Internet Explorer. Some browsers deviate and there several
// are OS- and browser-specific quirks.
//
// IE's keyCode values derive from Windows Virtual Key Codes:
//
//   http://msdn.microsoft.com/en-us/library/dd375731(VS.85).aspx
//
// Safari and Chrome adopted the IE model and codes for compatibility:
//
//   https://lists.webkit.org/pipermail/webkit-dev/2007-December/002992.html
//
// Firefox (Mozilla/Gecko) uses a very similar set of codes, which differ
// for a handful of keys for punctuation symbols:
//
//   https://developer.mozilla.org/en/DOM/Event/UIEvent/KeyEvent
//
// Opera also uses different codes for some non-alphabetic keys:
//
//   http://dev.opera.com/articles/view/keyboard-accessible-web-applications-3/
//
// Other references:
//
//    http://unixpapa.com/js/key.html
//    http://turboajax.com/dojo/key_compat.html
//    http://msdn.microsoft.com/en-us/scriptjunkie/ff928319
//    http://www.usb.org/developers/devclass_docs/Hut1_11.pdf

// ---------------------------------------------------------------------
// Future Standards and Directions
// ---------------------------------------------------------------------
//
// The DOM Level 3 Events (D3E) draft specification defines new properties
// for keyboard events:
//
//  readonly attribute DOMString char;
//  readonly attribute DOMString key;
//  readonly attribute unsigned long location;
//
//    |char| is a string representing the character data being typed, or empty
//
//    |key| is a string identifying a key... mostly. There's a complex algorithm
//    for filling in the details which makes the property not ideal for actually
//    identifying a physical key
//
//    |location| is a number identifying the physical location of the key -
//    standard, left vs. right, numpad, etc.
//
// Earlier drafts of the D4E spec used |keyLocation| instead of |location|,
// |keyIdentifier| instead of |key|, and |keyChar| instead of |char|. Some
// browsers (Chrome, Safari) have partial implementation of these earlier
// properties.
//
// The DOM Level 4 Events (D4E) draft specification defines one new property:
//
//   readonly attribute DOMString code;
//
//   |code| is a standardized key identifier mapping to a physical key on the
//   device, rather like a USB code.
//
// Earlier versions of the spec identified specific keys using |usbUsage|,
// which used the actual USB code to identify a physical key.
//
// D3E Spec: http://www.w3.org/TR/DOM-Level-3-Events#keys
// D4E Spec: https://dvcs.w3.org/hg/d4e/raw-file/tip/source_respec.htm#keyboard-events
//
// For cross-browser legacy mappings, see:
//
//   http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/Note-KeyProps.html

// ---------------------------------------------------------------------
// This Polyfill
// ---------------------------------------------------------------------
//
// This polyfill attempts to derive the D3E |location| and D4E |code| data - that is, a
// cross-browser, cross-platform physical key identification - from the legacy event data.
// Producing the D3E |key| and |char| properties, which are of extremely limited utility
// and a platform dead-end, is not a priority.

// ---------------------------------------------------------------------
// Known Issues
// ---------------------------------------------------------------------
//  Win/Chrome, Win/Safari, Win/IE, Win/Firefox - PrintScreen and Scroll only generate keyup events
//  Win/Chrome - Apps doesn't send keyup
//  Win/Opera - Tab moves focus even if cancelled; need explicit workaround to return focus
//  Windows w/ Apple's Bootcamp: BackQuote, BackSlash and Quote are mixed up in Chrome and IE

window.KeyboardEvent = window.KeyboardEvent || function KeyboardEvent() { throw new TypeError('Illegal constructor'); };
window.KeyboardEvent.DOM_KEY_LOCATION_STANDARD      = 0x00; // Default or unknown location
window.KeyboardEvent.DOM_KEY_LOCATION_LEFT          = 0x01; // e.g. Left Alt key
window.KeyboardEvent.DOM_KEY_LOCATION_RIGHT         = 0x02; // e.g. Right Alt key
window.KeyboardEvent.DOM_KEY_LOCATION_NUMPAD        = 0x03; // e.g. Numpad 0 or +
window.KeyboardEvent.DOM_KEY_LOCATION_MOBILE        = 0x04;
window.KeyboardEvent.DOM_KEY_LOCATION_JOYSTICK      = 0x05;

(function(global) {

  //--------------------------------------------------------------------
  //
  // Utilities
  //
  //--------------------------------------------------------------------

  function contains(s, ss) { return String(s).indexOf(ss) !== -1; }

  var os = (function() {
    if (contains(navigator.platform, 'Win')) { return 'win'; }
    if (contains(navigator.platform, 'Mac')) { return 'mac'; }
    if (contains(navigator.platform, 'CrOS')) { return 'cros'; }
    if (contains(navigator.platform, 'Linux')) { return 'linux'; }
    if (contains(navigator.userAgent, 'iPad') || contains(navigator.platform, 'iPod') || contains(navigator.platform, 'iPhone')) { return 'ios'; }
    return '';
  } ());

  var browser = (function() {
    if (contains(navigator.userAgent, 'Chrome/')) { return 'chrome'; }
    if (contains(navigator.vendor, 'Apple')) { return 'safari'; }
    if (contains(navigator.userAgent, 'MSIE')) { return 'ie'; }
    if (contains(navigator.userAgent, 'Gecko/')) { return 'moz'; }
    if (contains(navigator.userAgent, 'Opera/')) { return 'opera'; }
    return '';
  } ());

  var browser_os = browser + '-' + os;

  function mergeIf(baseTable, select, table) {
    if (browser_os === select || browser === select || os === select) {
      Object.keys(table).forEach(function(keyCode) {
        baseTable[keyCode] = table[keyCode];
      });
    }
  }

  function remap(o, key) {
    var r = {};
    Object.keys(o).forEach(function(k) {
      var item = o[k];
      if (key in item) {
        r[item[key]] = item;
      }
    });
    return r;
  }

  function invert(o) {
    var r = {};
    Object.keys(o).forEach(function(k) {
      r[o[k]] = k;
    });
    return r;
  }

  //--------------------------------------------------------------------
  //
  // Generic Mappings
  //
  //--------------------------------------------------------------------

  // "keyInfo" is a dictionary:
  //   code: string - name from D4E or other spec
  //   location (optional): number - one of the DOM_KEY_LOCATION values
  //   keyCap (optional): string - keyboard label in en-US locale

  // Map of keyCode to keyInfo
  var keyCodeToInfoTable = {
    // 0x01 - VK_LBUTTON
    // 0x02 - VK_RBUTTON
    0x03: { code: 'Cancel' }, // char \x0018 ??? - In D3E, not in D4E
    // 0x04 - VK_MBUTTON
    // 0x05 - VK_XBUTTON1
    // 0x06 - VK_XBUTTON2
    0x06: { code: 'Help' }, // ???
    // 0x07 - undefined
    0x08: { code: 'Backspace' },
    0x09: { code: 'Tab' },
    // 0x0A-0x0B - reserved
    0X0C: { code: 'Clear' }, // NumPad Center - In D3E, not in D4E
    0X0D: { code: 'Enter' },
    // 0x0E-0x0F - undefined

    0x10: { code: 'Shift' },
    0x11: { code: 'Control' },
    0x12: { code: 'Alt' },
    0x13: { code: 'Pause' },
    0x14: { code: 'CapsLock' },
    0x15: { code: 'KanaMode' },
    0x16: { code: 'HangulMode' }, // 0x15 as well in MSDN VK table ???
    0x17: { code: 'JunjaMode' }, // In D3E, not in D4E
    0x18: { code: 'FinalMode' }, // In D3E, not in D4E
    0x19: { code: 'Hanja' },
    // 0x19: { code: 'KanjiMode', location: KeyboardEvent.DOM_KEY_LOCATION_STANDARD }, // duplicate on Windows
    // 0x1A - undefined
    0x1B: { code: 'Esc' },
    0x1C: { code: 'Convert' },
    0x1D: { code: 'NoConvert' },
    0x1E: { code: 'Accept' }, // In D3E, not in D4E
    0x1F: { code: 'ModeChange' }, // In D3E, not in D4E

    0x20: { code: 'Space' },
    0x21: { code: 'PageUp' },
    0x22: { code: 'PageDown' },
    0x23: { code: 'End' },
    0x24: { code: 'Home' },
    0x25: { code: 'ArrowLeft' },
    0x26: { code: 'ArrowUp' },
    0x27: { code: 'ArrowRight' },
    0x28: { code: 'ArrowDown' },
    0x29: { code: 'Select' }, // In D3E, not in D4E
    0x2A: { code: 'Print' }, // In D3E, not in D4E
    0x2B: { code: 'Execute' }, // In D3E, not in D4E
    0x2C: { code: 'PrintScreen' },
    0x2D: { code: 'Insert' },
    0x2E: { code: 'Delete' },
    0x2F: { code: 'Help' }, // ???

    0x30: { code: 'Digit0', keyCap: '0' }, // 0)
    0x31: { code: 'Digit1', keyCap: '1' }, // 1!
    0x32: { code: 'Digit2', keyCap: '2' }, // 2@
    0x33: { code: 'Digit3', keyCap: '3' }, // 3#
    0x34: { code: 'Digit4', keyCap: '4' }, // 4$
    0x35: { code: 'Digit5', keyCap: '5' }, // 5%
    0x36: { code: 'Digit6', keyCap: '6' }, // 6^
    0x37: { code: 'Digit7', keyCap: '7' }, // 7&
    0x38: { code: 'Digit8', keyCap: '8' }, // 8*
    0x39: { code: 'Digit9', keyCap: '9' }, // 9(
    // 0x3A-0x40 - undefined

    0x41: { code: 'KeyA', keyCap: 'A' },
    0x42: { code: 'KeyB', keyCap: 'B' },
    0x43: { code: 'KeyC', keyCap: 'C' },
    0x44: { code: 'KeyD', keyCap: 'D' },
    0x45: { code: 'KeyE', keyCap: 'E' },
    0x46: { code: 'KeyF', keyCap: 'F' },
    0x47: { code: 'KeyG', keyCap: 'G' },
    0x48: { code: 'KeyH', keyCap: 'H' },
    0x49: { code: 'KeyI', keyCap: 'I' },
    0x4A: { code: 'KeyJ', keyCap: 'J' },
    0x4B: { code: 'KeyK', keyCap: 'K' },
    0x4C: { code: 'KeyL', keyCap: 'L' },
    0x4D: { code: 'KeyM', keyCap: 'M' },
    0x4E: { code: 'KeyN', keyCap: 'N' },
    0x4F: { code: 'KeyO', keyCap: 'O' },

    0x50: { code: 'KeyP', keyCap: 'P' },
    0x51: { code: 'KeyQ', keyCap: 'Q' },
    0x52: { code: 'KeyR', keyCap: 'R' },
    0x53: { code: 'KeyS', keyCap: 'S' },
    0x54: { code: 'KeyT', keyCap: 'T' },
    0x55: { code: 'KeyU', keyCap: 'U' },
    0x56: { code: 'KeyV', keyCap: 'V' },
    0x57: { code: 'KeyW', keyCap: 'W' },
    0x58: { code: 'KeyX', keyCap: 'X' },
    0x59: { code: 'KeyY', keyCap: 'Y' },
    0x5A: { code: 'KeyZ', keyCap: 'Z' },
    0x5B: { code: 'OSLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT },
    0x5C: { code: 'OSRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT },
    0x5D: { code: 'ContextMenu' }, // Context Menu
    // 0x5E - reserved
    // 0x5F - VK_SLEEP 'Sleep' TODO ???

    0x60: { code: 'Numpad0', keyCap: '0', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x61: { code: 'Numpad1', keyCap: '1', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x62: { code: 'Numpad2', keyCap: '2', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x63: { code: 'Numpad3', keyCap: '3', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x64: { code: 'Numpad4', keyCap: '4', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x65: { code: 'Numpad5', keyCap: '5', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x66: { code: 'Numpad6', keyCap: '6', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x67: { code: 'Numpad7', keyCap: '7', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x68: { code: 'Numpad8', keyCap: '8', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x69: { code: 'Numpad9', keyCap: '9', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x6A: { code: 'NumpadMultiply', keyCap: '*', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x6B: { code: 'NumpadAdd', keyCap: '+', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x6C: { code: 'NumpadComma', keyCap: ',', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }, // In D3E, not in D4E
    0x6D: { code: 'NumpadSubtract', keyCap: '-', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x6E: { code: 'NumpadDecimal', keyCap: '.', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x6F: { code: 'NumpadDivide', keyCap: '/', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },

    0x70: { code: 'F1' },
    0x71: { code: 'F2' },
    0x72: { code: 'F3' },
    0x73: { code: 'F4' },
    0x74: { code: 'F5' },
    0x75: { code: 'F6' },
    0x76: { code: 'F7' },
    0x77: { code: 'F8' },
    0x78: { code: 'F9' },
    0x79: { code: 'F10' },
    0x7A: { code: 'F11' },
    0x7B: { code: 'F12' },
    0x7C: { code: 'F13' },
    0x7D: { code: 'F14' },
    0x7E: { code: 'F15' },
    0x7F: { code: 'F16' },

    0x80: { code: 'F17' },
    0x81: { code: 'F18' },
    0x82: { code: 'F19' },
    0x83: { code: 'F20' },
    0x84: { code: 'F21' },
    0x85: { code: 'F22' },
    0x86: { code: 'F23' },
    0x87: { code: 'F24' },
    // 0x88-0x8F - unassigned

    0x90: { code: 'NumLock', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x91: { code: 'ScrollLock' },
    // 0x92-0x96 - OEM specific
    // 0x97-0x9F - unassigned

    // NOTE: 0xA0-0xA5 usually mapped to 0x10-0x12 in browsers
    0xA0: { code: 'ShiftLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT },
    0xA1: { code: 'ShiftRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT },
    0xA2: { code: 'ControlLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT },
    0xA3: { code: 'ControlRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT },
    0xA4: { code: 'AltLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT },
    0xA5: { code: 'AltRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT },
    0xA6: { code: 'BrowserBack' },
    0xA7: { code: 'BrowserForward' },
    0xA8: { code: 'BrowserRefresh' },
    0xA9: { code: 'BrowserStop' },
    0xAA: { code: 'BrowserSearch' },
    0xAB: { code: 'BrowserFavorites' },
    0xAC: { code: 'BrowserHome' },
    0xAD: { code: 'VolumeMute' },
    0xAE: { code: 'VolumeDown' },
    0xAF: { code: 'VolumeUp' },

    0xB0: { code: 'MediaNextTrack' },
    0xB1: { code: 'MediaPreviousTrack' },
    0xB2: { code: 'MediaStop' },
    0xB3: { code: 'MediaPlayPause' },
    0xB4: { code: 'LaunchMail' },
    0xB5: { code: 'MediaSelect' },
    0xB6: { code: 'LaunchApp1' },
    0xB7: { code: 'LaunchApp2' },
    // 0xB8-0xB9 - reserved
    0xBA: { code: 'Semicolon',  keyCap: ';' }, // ;: (US Standard 101)
    0xBB: { code: 'Equal', keyCap: '=' }, // =+
    0xBC: { code: 'Comma', keyCap: ',' }, // ,<
    0xBD: { code: 'Minus', keyCap: '-' }, // -_
    0xBE: { code: 'Period', keyCap: '.' }, // .>
    0xBF: { code: 'Slash', keyCap: '/' }, // /? (US Standard 101)

    0xC0: { code: 'BackQuote', keyCap: '`' }, // `~ (US Standard 101)
    // 0xC1-0xCF - reserved

    // 0xD0-0xD7 - reserved
    // 0xD8-0xDA - unassigned
    0xDB: { code: 'BracketLeft', keyCap: '[' }, // [{ (US Standard 101)
    0xDC: { code: 'Backslash',  keyCap: '\\' }, // \| (US Standard 101)
    0xDD: { code: 'BracketRight', keyCap: ']' }, // ]} (US Standard 101)
    0xDE: { code: 'Quote', keyCap: '\'' }, // '" (US Standard 101)
    // 0xDF - miscellaneous/varies

    // 0xE0 - reserved
    // 0xE1 - OEM specific
    0xE2: { code: 'IntlBackslash',  keyCap: '\\' }, // \| (UK Standard 102)
    // 0xE3-0xE4 - OEM specific
    0xE5: { code: 'Process' }, // In D3E, not in D4E
    // 0xE6 - OEM specific
    // 0xE7 - VK_PACKET
    // 0xE8 - unassigned
    // 0xE9-0xEF - OEM specific

    // 0xF0-0xF5 - OEM specific
    0xF6: { code: 'Attn' }, // In D3E, not in D4E
    0xF7: { code: 'Crsel' }, // In D3E, not in D4E
    0xF8: { code: 'Exsel' }, // In D3E, not in D4E
    0xF9: { code: 'EraseEof' }, // In D3E, not in D4E
    0xFA: { code: 'Play' }, // In D3E, not in D4E
    0xFB: { code: 'Zoom' }, // In D3E, not in D4E
    // 0xFC - VK_NONAME - reserved
    // 0xFD - VK_PA1
    0xFE: { code: 'Clear' } // In D3E, not in D4E
  };

  // In D4E spec, but legacy keyCode is unknown:

  // code: usb
  // 'IntlHash': 0x070032,
  // 'IntlRo': 0x070087,
  // 'IntlYen': 0x070089,
  // 'NumpadBackspace': 0x0700bb,
  // 'NumpadClear': 0x0700d8,
  // 'NumpadClearEntry': 0x0700d9,
  // 'NumpadMemoryAdd': 0x0700d3,
  // 'NumpadMemoryClear': 0x0700d2,
  // 'NumpadMemoryRecall': 0x0700d1,
  // 'NumpadMemoryStore': 0x0700d0,
  // 'NumpadMemorySubtract': 0x0700d4,
  // 'NumpadParenLeft': 0x0700b6,
  // 'NumpadParenRight': 0x0700b7,

  //--------------------------------------------------------------------
  //
  // Browser/OS Specific Mappings
  //
  //--------------------------------------------------------------------

  mergeIf(keyCodeToInfoTable,
          'moz', {
            0x3B: { code: 'Semicolon', keyCap: ';' }, // ;: (US Standard 101)
            0x3D: { code: 'Equal', keyCap: '=' }, // =+
            0x6B: { code: 'Equal', keyCap: '=' }, // =+
            0x6D: { code: 'Minus', keyCap: '-' }, // -_
            0xBB: { code: 'NumpadAdd', keyCap: '+', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
            0xBD: { code: 'NumpadSubtract', keyCap: '-', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }
          });

  mergeIf(keyCodeToInfoTable,
          'moz-mac', {
            0x0C: { code: 'NumLock', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
            0xAD: { code: 'Minus', keyCap: '-' } // -_
          });

  mergeIf(keyCodeToInfoTable,
          'moz-win', {
            0xAD: { code: 'Minus', keyCap: '-' } // -_
          });

  mergeIf(keyCodeToInfoTable,
          'chrome-mac', {
            0x5D: { code: 'OSRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT }
          });

  // Windows via Bootcamp (!)
  if (0) {
    mergeIf(keyCodeToInfoTable,
            'chrome-win', {
              0xC0: { code: 'Quote', keyCap: '\'' }, // '" (US Standard 101)
              0xDE: { code: 'Backslash',  keyCap: '\\' }, // \| (US Standard 101)
              0xDF: { code: 'BackQuote', keyCap: '`' } // `~ (US Standard 101)
            });

    mergeIf(keyCodeToInfoTable,
            'ie', {
              0xC0: { code: 'Quote', keyCap: '\'' }, // '" (US Standard 101)
              0xDE: { code: 'Backslash',  keyCap: '\\' }, // \| (US Standard 101)
              0xDF: { code: 'BackQuote', keyCap: '`' } // `~ (US Standard 101)
            });
  }

  mergeIf(keyCodeToInfoTable,
          'safari', {
            0x03: { code: 'Enter' }, // old Safari
            0x19: { code: 'Tab' } // old Safari for Shift+Tab
          });

  mergeIf(keyCodeToInfoTable,
          'ios', {
            0x0A: { code: 'Enter', location: KeyboardEvent.DOM_KEY_LOCATION_MOBILE }
          });

  mergeIf(keyCodeToInfoTable,
          'safari-mac', {
            0x5B: { code: 'OSLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT },
            0x5D: { code: 'OSRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT },
            0xE5: { code: 'KeyQ', keyCap: 'Q' } // On alternate presses, Ctrl+Q sends this
          });

  // TODO: Haven't tested Opera in a while, probably obsolete:
  mergeIf(keyCodeToInfoTable,
          'opera', {
            // NOTE: several of these collide in theory, but most other keys are unrepresented
            0x2F: { code: 'NumpadDivide', keyCap: '/', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }, // Same as 'Help'
            0x2A: { code: 'NumpadMultiply', keyCap: '*', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }, // Same as 'Print'
            //0x2D: { code: 'NumpadSubtract', keyCap: '-', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }, // Same as 'Insert'
            0x2B: { code: 'NumpaddAdd', keyCap: '+', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }, // Same as 'Execute'
            0x3B: { code: 'Semicolon', keyCap: ';' }, // ;: (US Standard 101)
            0x3D: { code: 'Equal', keyCap: '=' }, // =+
            0x6D: { code: 'Minus', keyCap: '-'} // -_
          });


  //--------------------------------------------------------------------
  //
  // USB Usage IDs
  //
  //--------------------------------------------------------------------

  // (Purely informative, but fun!)

  // codeToUsbTable[code] -> usbUsageId (high 16 bits are page, low 16 bits are ID)

  var codeToUsbTable = {

    // Writing System Keys
    'BackQuote': 0x070035, // ` and ~ on a US keyboard. This is the 半角/全角/漢字 (hankaku/zenkaku/kanji) key on Japanese keyboards
    'Backslash': 0x070031, // \ and | on a US keyboard. Found only on standard 101-key layouts.
    'Backspace': 0x07002a, // Labelled Delete on Macintosh keyboards.
    'BracketLeft': 0x07002f, // [ and { on a US keyboard.
    'BracketRight': 0x070030, // ] and } on a US keyboard.
    'Comma': 0x070036, // , and < on a US keyboard.
    'Digit0': 0x070027, // 0 and ) on a US keyboard.
    'Digit1': 0x07001e, // 1 and ! on a US keyboard.
    'Digit2': 0x07001f, // 2 and @ on a US keyboard.
    'Digit3': 0x070020, // 3 and # on a US keyboard.
    'Digit4': 0x070021, // 4 and $ on a US keyboard.
    'Digit5': 0x070022, // 5 and % on a US keyboard.
    'Digit6': 0x070023, // 6 and ^ on a US keyboard.
    'Digit7': 0x070024, // 7 and & on a US keyboard.
    'Digit8': 0x070025, // 8 and * on a US keyboard.
    'Digit9': 0x070026, // 9 and ( on a US keyboard.
    'Equal': 0x07002e, // = and + on a US keyboard.
    'IntlBackslash': 0x070064, // Located between the 'ShiftLeft' and 'KeyZ' keys. The \ and | key on a UK keyboard.
    'IntlHash': 0x070032, // Located between the 'Quote' and 'Enter' keys on row E of the keyboard. The # and ~ key on a UK keyboard.
    'IntlRo': 0x070087, // Located between the 'Slash' and 'ShiftRight' keys. The \ and ろ (ro) key on a Japanese keyboard.
    'IntlYen': 0x070089, // Located between the 'Equal' and 'Backspace' keys. The ¥ (yen) key on a Japanese keyboard. The \ and / key on a Russian keyboard.
    'KeyA': 0x070004, // a on a US keyboard. Labelled q on an AZERTY (e.g., French) keyboard.
    'KeyB': 0x070005, // b on a US keyboard.
    'KeyC': 0x070006, // c on a US keyboard.
    'KeyD': 0x070007, // d on a US keyboard.
    'KeyE': 0x070008, // e on a US keyboard.
    'KeyF': 0x070009, // f on a US keyboard.
    'KeyG': 0x07000a, // g on a US keyboard.
    'KeyH': 0x07000b, // h on a US keyboard.
    'KeyI': 0x07000c, // i on a US keyboard.
    'KeyJ': 0x07000d, // j on a US keyboard.
    'KeyK': 0x07000e, // k on a US keyboard.
    'KeyL': 0x07000f, // l on a US keyboard.
    'KeyM': 0x070010, // m on a US keyboard.
    'KeyN': 0x070011, // n on a US keyboard.
    'KeyO': 0x070012, // o on a US keyboard.
    'KeyP': 0x070013, // p on a US keyboard.
    'KeyQ': 0x070014, // q on a US keyboard. Labelled a on an AZERTY (e.g., French) keyboard.
    'KeyR': 0x070015, // r on a US keyboard.
    'KeyS': 0x070016, // s on a US keyboard.
    'KeyT': 0x070017, // t on a US keyboard.
    'KeyU': 0x070018, // u on a US keyboard.
    'KeyV': 0x070019, // v on a US keyboard.
    'KeyW': 0x07001a, // w on a US keyboard. Labelled z on an AZERTY (e.g., French) keyboard.
    'KeyX': 0x07001b, // x on a US keyboard.
    'KeyY': 0x07001c, // y on a US keyboard. Labelled z on a QWERTZ (e.g., German) keyboard.
    'KeyZ': 0x07001d, // z on a US keyboard. Labelled w on an AZERTY (e.g., French) keyboard, and y on a QWERTZ (e.g., German) keyboard.
    'Minus': 0x07002d, // - and _ on a US keyboard.
    'Period': 0x070037, // . and > on a US keyboard.
    'Quote': 0x070034, // ' and " on a US keyboard.
    'Semicolon': 0x070033, // ; and : on a US keyboard.
    'Slash': 0x070038, // / and ? on a US keyboard.

    // Functional Keys
    'AltLeft': 0x0700e2, // Labelled Alt or Option.
    'AltRight': 0x0700e6, // Labelled Alt or Option. This is the AltGr key on many keyboard layouts.
    'CapsLock': 0x070039,
    'ContextMenu': 0x070065, // The application context menu key, which is typically found between the right OS key and the right Control key.
    'ControlLeft': 0x0700e0,
    'ControlRight': 0x0700e4,

    // SPEC BUG: listed as 0x070032 in D4E spec
    'Enter': 0x070028, // Labelled Enter and Return on Macintosh keyboards.
    'OSLeft': 0x0700e3, // The Windows, ⌘, Command or other OS symbol key.
    'OSRight': 0x0700e7, // The Windows, ⌘, Command or other OS symbol key.
    'ShiftLeft': 0x0700e1,
    'ShiftRight': 0x0700e5,
    'Space': 0x07002c, // The   key.
    'Tab': 0x07002b,

    // Japanese/Korean
    'Convert': 0x07008a, // Japanese: 変換 (henkan)
    'HangulMode': 0x070090, // Korean: 한/영 (han/yeong)
    'Hanja': 0x070091, // Korean: 한자 (hanja)
    'KanaMode': 0x070088, // Japanese: カタカナ/ひらがな/ローマ字 (katakana/hiragana/romaji)
    'NoConvert': 0x07008b, // Japanese: 無変換 (muhenkan)

    // Control Pad
    'Delete': 0x07004c,
    'End': 0x07004d,
    'Help': 0x070075, // Not present on standard PC keyboards.
    'Home': 0x07004a,
    'Insert': 0x070049, // Not present on Apple keyboards.
    'PageDown': 0x07004e,
    'PageUp': 0x07004b,

    // Arrow Pad
    'ArrowDown': 0x070051,
    'ArrowLeft': 0x070050,
    'ArrowRight': 0x07004f,
    'ArrowUp': 0x070052,

    // Numpad
    'NumLock': 0x070053,
    'Numpad0': 0x070062, // 0 and Insert
    'Numpad1': 0x070059, // 1 and End
    'Numpad2': 0x07005a, // 2 and ArrowDown
    'Numpad3': 0x07005b, // 3 and PageDown
    'Numpad4': 0x07005c, // 4 and ArrowLeft
    'Numpad5': 0x07005d, // 5
    'Numpad6': 0x07005e, // 6 and ArrowRight
    'Numpad7': 0x07005f, // 7 and Home
    'Numpad8': 0x070060, // 8 and ArrowUp
    'Numpad9': 0x070061, // 9 and PageUp
    'NumpadAdd': 0x070057, // +
    'NumpadBackspace': 0x0700bb, // Found on the Microsoft Natural Keyboard.
    'NumpadClear': 0x0700d8,
    'NumpadClearEntry': 0x0700d9,
    'NumpadComma': 0x070085, // , (thousands separator). For locales where the thousands separator is a '.' (e.g., Brazil), this key may generate a '.'.
    'NumpadDecimal': 0x070063, // . (decimal separator) and Delete. For locales where the decimal separator is ',' (e.g., Brazil), this key may generate a ','.
    'NumpadDivide': 0x070054, // /
    'NumpadEnter': 0x070058,
    'NumpadMemoryAdd': 0x0700d3,
    'NumpadMemoryClear': 0x0700d2,
    'NumpadMemoryRecall': 0x0700d1,
    'NumpadMemoryStore': 0x0700d0,
    'NumpadMemorySubtract': 0x0700d4,
    'NumpadMultiply': 0x070055, // *
    'NumpadParenLeft': 0x0700b6, // ( Found on the Microsoft Natural Keyboard.
    'NumpadParenRight': 0x0700b7, // ) Found on the Microsoft Natural Keyboard.
    'NumpadSubtract': 0x070056, // -

    // Function
    'Esc': 0x070029,
    'F1': 0x07003a,
    'F2': 0x07003b,
    'F3': 0x07003c,
    'F4': 0x07003d,
    'F5': 0x07003e,
    'F6': 0x07003f,
    'F7': 0x070040,
    'F8': 0x070041,
    'F9': 0x070042,
    'F10': 0x070043,
    'F11': 0x070044,
    'F12': 0x070045,

    'F13': 0x070068,
    'F14': 0x070069,
    'F15': 0x07006a,
    'F16': 0x07006b,
    'F17': 0x07006c,
    'F18': 0x07006d,
    'F19': 0x07006e,
    'F20': 0x07006f,
    'F21': 0x070070,
    'F22': 0x070071,
    'F23': 0x070072,
    'F24': 0x070073,

    'PrintScreen': 0x070046, // PrintScreen and SysReq
    'ScrollLock': 0x070047,
    'Pause': 0x070048, // Pause and Break

    // Media keyys
    'BrowserBack': 0x0c0224,
    'BrowserFavorites': 0x0c0228,
    'BrowserForward': 0x0c0225,
    'BrowserHome': 0x0c0223,
    'BrowserRefresh': 0x0c0227,
    'BrowserSearch': 0x0c0221,
    'BrowserStop': 0x0c0226,
    'LaunchMail': 0x0c018a,
    'MediaNextTrack': 0x0c00b5,
    'MediaPlayPause': 0x0c00cd,
    'MediaPreviousTrack': 0x0c00b6,
    'MediaStop': 0x0c00b7,
    'VolumeDown': 0x070081,
    'VolumeMute': 0x07007f,
    'VolumeUp': 0x070080,

    // In D3E, not in D4E, but known legacy keyCode/USB
    'Attn': 0x07009a,
    'Cancel': 0x07009b,
    'Clear': 0x07009c,
    'Crsel': 0x0700a3,
    'Execute': 0x070074,
    'Exsel': 0x0700a4,
    'Select': 0x070077
  };


  //--------------------------------------------------------------------
  //
  // Identifier Mappings
  //
  //--------------------------------------------------------------------

  // Cases where newer-ish browsers send keyIdentifier which can be
  // used to disambiguate keys.

  // keyIdentifierTable[keyIdentifier] -> keyInfo

  var keyIdentifierTable = {};
  if ('cros' === os) {
    keyIdentifierTable['U+00A0'] = { code: 'ShiftLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT };
    keyIdentifierTable['U+00A1'] = { code: 'ShiftRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT };
    keyIdentifierTable['U+00A2'] = { code: 'ControlLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT };
    keyIdentifierTable['U+00A3'] = { code: 'ControlRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT };
    keyIdentifierTable['U+00A4'] = { code: 'AltLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT };
    keyIdentifierTable['U+00A5'] = { code: 'AltRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT };
  }
  if ('chrome-mac' === browser_os) {
    keyIdentifierTable['U+0010'] = { code: 'ContextMenu' };
  }
  if ('safari-mac' === browser_os) {
    keyIdentifierTable['U+0010'] = { code: 'ContextMenu' };
  }
  if ('ios' === os) {
    // These only generate keyup events
    keyIdentifierTable['U+0010'] = { code: 'Function' };

    keyIdentifierTable['U+001C'] = { code: 'ArrowLeft' };
    keyIdentifierTable['U+001D'] = { code: 'ArrowRight' };
    keyIdentifierTable['U+001E'] = { code: 'ArrowUp' };
    keyIdentifierTable['U+001F'] = { code: 'ArrowDown' };

    keyIdentifierTable['U+0001'] = { code: 'Home' }; // Fn + ArrowLeft
    keyIdentifierTable['U+0004'] = { code: 'End' }; // Fn + ArrowRight
    keyIdentifierTable['U+000B'] = { code: 'PageUp' }; // Fn + ArrowUp
    keyIdentifierTable['U+000C'] = { code: 'PageDown' }; // Fn + ArrowDown
  }

  //--------------------------------------------------------------------
  //
  // Location Mappings
  //
  //--------------------------------------------------------------------

  // Cases where newer-ish browsers send location/keyLocation which
  // can be used to disambiguate keys.

  // locationTable[location][keyCode] -> keyInfo
  var locationTable = [];
  locationTable[KeyboardEvent.DOM_KEY_LOCATION_LEFT] = {
    0x10: { code: 'ShiftLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT },
    0x11: { code: 'ControlLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT },
    0x12: { code: 'AltLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT }
  };
  locationTable[KeyboardEvent.DOM_KEY_LOCATION_RIGHT] = {
    0x10: { code: 'ShiftRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT },
    0x11: { code: 'ControlRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT },
    0x12: { code: 'AltRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT }
  };
  locationTable[KeyboardEvent.DOM_KEY_LOCATION_NUMPAD] = {
    0x0D: { code: 'NumpadEnter', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }
  };

  mergeIf(locationTable[KeyboardEvent.DOM_KEY_LOCATION_NUMPAD], 'moz', {
    0x6D: { code: 'NumpadSubtract', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0x6B: { code: 'NumpadAdd', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }
  });
  mergeIf(locationTable[KeyboardEvent.DOM_KEY_LOCATION_LEFT], 'moz-mac', {
    0xE0: { code: 'OSLeft', location: KeyboardEvent.DOM_KEY_LOCATION_LEFT }
  });
  mergeIf(locationTable[KeyboardEvent.DOM_KEY_LOCATION_RIGHT], 'moz-mac', {
    0xE0: { code: 'OSRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT }
  });
  mergeIf(locationTable[KeyboardEvent.DOM_KEY_LOCATION_RIGHT], 'moz-win', {
    0x5B: { code: 'OSRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT }
  });


  mergeIf(locationTable[KeyboardEvent.DOM_KEY_LOCATION_RIGHT], 'mac', {
    0x5D: { code: 'OSRight', location: KeyboardEvent.DOM_KEY_LOCATION_RIGHT }
  });

  mergeIf(locationTable[KeyboardEvent.DOM_KEY_LOCATION_NUMPAD], 'chrome-mac', {
    0x0C: { code: 'NumLock', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }
  });

  mergeIf(locationTable[KeyboardEvent.DOM_KEY_LOCATION_NUMPAD], 'safari-mac', {
    0x0C: { code: 'NumLock', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0xBB: { code: 'NumpadAdd', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0xBD: { code: 'NumpadSubtract', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0xBE: { code: 'NumpadDecimal', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD },
    0xBF: { code: 'NumpadDivide', location: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD }
  });



  //--------------------------------------------------------------------
  //
  // Exported Functions
  //
  //--------------------------------------------------------------------


  var codeTable = remap(keyCodeToInfoTable, 'code');
  global.identifyKey = function(event) {

    if ('code' in event) {
      return;
    }

    var keyCode = 'keyCode' in event ? event.keyCode : 'which' in event ? event.which : 0;

    var keyInfo = (function(){
      if ('location' in event || 'keyLocation' in event) {
        var location = 'location' in event ? event.location : event.keyLocation;
        if (location && keyCode in locationTable[location]) {
          return locationTable[location][keyCode];
        }
      }
      if ('keyIdentifier' in event && event.keyIdentifier in keyIdentifierTable) {
        return keyIdentifierTable[event.keyIdentifier];
      }
      if (keyCode in keyCodeToInfoTable) {
        return keyCodeToInfoTable[keyCode];
      }
      return null;
    }());

    // TODO: Track these down and move to general tables
    if (0) {
      // TODO: Map these for newerish browsers?
      // TODO: iOS only?
      // TODO: Override with more common keyIdentifier name?
      switch (event.keyIdentifier) {
      case 'U+0010': keyInfo = { code: 'Function' }; break;
      case 'U+001C': keyInfo = { code: 'ArrowLeft' }; break;
      case 'U+001D': keyInfo = { code: 'ArrowRight' }; break;
      case 'U+001E': keyInfo = { code: 'ArrowUp' }; break;
      case 'U+001F': keyInfo = { code: 'ArrowDown' }; break;
      }
    }

    if (!keyInfo)
      return;

    // Current version of the spec:
    event.code = event.code || keyInfo.code || '';
    event.location = ('location' in event) ? event.location :
      ('keyLocation' in event) ? event.keyLocation :
      ('location' in keyInfo) ? keyInfo.location : KeyboardEvent.DOM_KEY_LOCATION_STANDARD;
    event.queryKeyCap = event.queryKeyCap || function(code, locale) {
      code = String(code);
      if (!codeTable.hasOwnProperty(code)) {
        return 'Undefined';
      }
      if (locale && String(locale).toLowerCase() !== 'en-us') {
        throw new Error('Unsupported locale');
      }

      var keyInfo = codeTable[code];
      return keyInfo.keyCap || keyInfo.code || 'Undefined';
    };

    // TODO: Update dependent files (e.g. Applesoft TTY) and remove these
    event.keyIdentifier = event.keyIdentifier || event.code;
    event.keyLocation = event.location;
    event.usbUsage = event.usbUsage || codeToUsbTable[event.code];
  };
} (window));
